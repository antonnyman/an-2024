// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package embroidery

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "an-2024/views/layout"

func EmbroideryView() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = layout.Header(true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" <main class=\"post\"><article><h1>Embroidery</h1><p><a href=\"https://github.com/antonnyman/embroidery\">GitHub</a> / <a href=\"https://www.npmjs.com/package/embroidery\">npm</a></p><p><strong>What is Embroidery?</strong><br>If you've ever written code that produces HTML you probably at some point have to do some kind of DOM manipulation or event listening. You want to click a button to update a feed, do an AJAX form submission or maybe toggle CSS classes. While you definitely can just use regular Javascript or even jQuery it can feel a bit cumbersome or repetitive.</p><p>Embroidery's goal is to make it easier to add Javascript behaviors to your HTML while keeping your code very close to the metal. It aims to be 2kB (minified and gzipped) or less. Currently, it's 1.9kB.</p><p>This is just a toy project and mainly serves a learning purpose. It's not meant to be used in production.</p><h2>Getting started</h2><h3>Using npm</h3>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span>npm install embroidery <span style="color:#8b949e;font-style:italic"># or yarn, pnpm etc.</span>
</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>And then in your main JS file:</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#ff7b72">import</span> { Embroidery } from <span style="color:#a5d6ff">'embroidery'</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">const</span> app <span style="color:#ff7b72;font-weight:bold">=</span> Embroidery.start()
</span></span><span style="display:flex;"><span>app.register({ <span style="color:#8b949e;font-style:italic">/* your controllers */</span>})</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h3>Using a CDN</h3>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#ff7b72">import</span> { Embroidery } from <span style="color:#a5d6ff">'https://unpkg.com/embroidery@0.1.3/dist/embroidery.m.js'</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">const</span> app <span style="color:#ff7b72;font-weight:bold">=</span> Embroidery.start()
</span></span><span style="display:flex;"><span>app.register({ <span style="color:#79c0ff">/_ your controllers _/</span>})</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h3>Usage</h3><p>Let's dive in! Start by adding some HTML.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">&lt;!-- HTML somewhere in your web app --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#7ee787">div</span> data-controller<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"myController"</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#7ee787">input</span> data-target<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"name"</span> type<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"text"</span> /&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#7ee787">button</span> data-action<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"click-&gt;greet"</span>&gt;Greet&lt;/<span style="color:#7ee787">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#7ee787">span</span> data-target<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"output"</span>&gt;&lt;/<span style="color:#7ee787">span</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#7ee787">div</span>&gt;</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>Then create a controller. This can be a separate file or part of a combined JS file.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// my-controller.js
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span><span style="color:#ff7b72">export</span> <span style="color:#ff7b72">const</span> myController <span style="color:#ff7b72;font-weight:bold">=</span> {
</span></span><span style="display:flex;"><span>  greet({ name, output }) {
</span></span><span style="display:flex;"><span>    output.textContent <span style="color:#ff7b72;font-weight:bold">=</span> name.value
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>You register your controller in your main JS file.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#ff7b72">import</span> { Embroidery } from <span style="color:#a5d6ff">'embroidery'</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> { myController } from <span style="color:#a5d6ff">'my-controller'</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">let</span> app <span style="color:#ff7b72;font-weight:bold">=</span> Embroidery.start()
</span></span><span style="display:flex;"><span>app.register({ myController })</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>There are a few things to look at here: controllers, targets, and actions.</p><p>Controllers are the wrapper of your Embroidery code. The name in <code>data-controller</code> HTML maps to the name of the exported const in the JS file - they always need to be the same. Controllers cannot be kebab-cased since that is not a valid variable name in JS. I prefer using <code>camelCase</code> but you can use <code>snake_case</code> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(`if`)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/embroidery/view.templ`, Line: 56, Col: 358}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" you want.</p><p>Actions are the event and name of the function that should run when the event is triggered. Events are regular DOM events. As you can see, they are separated by an arrow: <code>-></code>, where the first part is the event and the last part is the name of the function.</p><p>Try to change <code>click</code> to <code>hover</code>!</p><p>Actions come with a few default events. For example, buttons and links have the default event <code>click</code>.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span>Element     Event
</span></span><span style="display:flex;"><span>a           <span style="color:#a5d6ff">'click'</span>
</span></span><span style="display:flex;"><span>button      <span style="color:#a5d6ff">'click'</span>
</span></span><span style="display:flex;"><span>form        <span style="color:#a5d6ff">'submit'</span>
</span></span><span style="display:flex;"><span>input       <span style="color:#a5d6ff">'input'</span>
</span></span><span style="display:flex;"><span>select      <span style="color:#a5d6ff">'change'</span>
</span></span><span style="display:flex;"><span>textarea    <span style="color:#a5d6ff">'input'</span></span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>You can also chain actions!</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span>&lt;<span style="color:#7ee787">div</span> data-controller<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"manyActions"</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#7ee787">div</span> data-action<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"mouseover-&gt;doThis mouseout-&gt;doThat"</span>&gt;Do this or that&lt;/<span style="color:#7ee787">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#7ee787">div</span>&gt;</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h4>Multiple targets</h4><p>If you have multiple elements on the same level, you can access them as an array. You'll have to append <code>[]</code> to the target name to mark them as being part of an array.</p><p><em>Note!</em> The name to access the target in the controller will change to <code>&lt;targetName&gt;Targets</code>. So the target name <code>snowboard[]</code> becomes <code>snowboardTargets</code>.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span>&lt;<span style="color:#7ee787">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#7ee787">div</span> data-target<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"hello[]"</span>&gt;Hello to you&lt;/<span style="color:#7ee787">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#7ee787">div</span> data-target<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"hello[]"</span>&gt;Hello to me&lt;/<span style="color:#7ee787">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#7ee787">div</span> data-target<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"hello[]"</span>&gt;Hello to everyone&lt;/<span style="color:#7ee787">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#7ee787">div</span>&gt;</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<br>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// hello-controller.js
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span><span style="color:#ff7b72">export</span> <span style="color:#ff7b72">const</span> helloController <span style="color:#ff7b72;font-weight:bold">=</span> {
</span></span><span style="display:flex;"><span>    init({ helloTargets }) {
</span></span><span style="display:flex;"><span>        helloTargets.forEach((target) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#8b949e;font-style:italic">//...
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>        })
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h3>Managing state</h3><p>State in Embroidery is similar to mutable class variables. Here's an example of how to store the state of an input value.</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span><span style="color:#ff7b72">export</span> <span style="color:#ff7b72">const</span> controller <span style="color:#ff7b72;font-weight:bold">=</span> {
</span></span><span style="display:flex;"><span>    name<span style="color:#ff7b72;font-weight:bold">:</span> <span style="color:#a5d6ff">''</span>,
</span></span><span style="display:flex;"><span>    myName({ name }) { <span style="color:#8b949e;font-style:italic">// name is an &lt;input /&gt; in this case
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>        <span style="color:#ff7b72">this</span>.name <span style="color:#ff7b72;font-weight:bold">=</span> name.value
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    submit() {
</span></span><span style="display:flex;"><span>        fetch(<span style="color:#a5d6ff">'/update'</span>, {
</span></span><span style="display:flex;"><span>            method<span style="color:#ff7b72;font-weight:bold">:</span> <span style="color:#a5d6ff">'POST'</span>,
</span></span><span style="display:flex;"><span>            body<span style="color:#ff7b72;font-weight:bold">:</span> JSON.stringify({
</span></span><span style="display:flex;"><span>            name<span style="color:#ff7b72;font-weight:bold">:</span> <span style="color:#ff7b72">this</span>.name
</span></span><span style="display:flex;"><span>            })
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h3>(Very) Experimental: Partials</h3><p>Most REST APIs return JSON or XML and leave it up to you on how to organize and style the data. But there might be times when you can take a shortcut and return HTML asynchronously instead. 37signals calls this HTML-over-the-wire and (re)popularized this technique in HEY. It can be a way to reduce the data payload and defer content that does not need to be rendered immediately on the server to arrive later on the client.</p><p>Embroidery supports this as well:</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(`<div class="field box" id="output"><pre style="color:#e6edf3;background-color:#0d1117;"><code><span style="display:flex;"><span>&lt;<span style="color:#7ee787">div</span> data-partial<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">"/endpoint-that-returns-html"</span>&gt;&lt;/<span style="color:#7ee787">div</span>&gt;
</span></span></code></pre></div>`).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>What's cool about this is that you can have controllers embedded in the partial HTML, and Embroidery will pick them up at runtime.</p><p>Written by Anton, Nov 2020<br>Updated Sep 2024</p></article></main>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layout.Base().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
